DROP DATABASE	IF EXISTS TestingManagement;

CREATE DATABASE	 IF NOT EXISTS TestingManagement;
USE TestingManagement;

DROP TABLE IF EXISTS Department;
CREATE TABLE IF NOT EXISTS Department (
	DepartmentID			TINYINT UNSIGNED  AUTO_INCREMENT PRIMARY KEY,
    DepartmentName 			NVARCHAR(50) NOT NULL UNIQUE KEY
);

DROP TABLE IF EXISTS `Position`;
CREATE TABLE IF NOT EXISTS `Position` (
	PositionID				TINYINT UNSIGNED AUTO_INCREMENT,
    PositionName 			ENUM('DEV','TEST', 'Scrum Master', 'PM') NOT NULL UNIQUE KEY,
    PRIMARY KEY (PositionID)
);

DROP TABLE IF EXISTS  `Account`;
CREATE TABLE IF NOT EXISTS `Account` (
	AccountID 				TINYINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	Email					VARCHAR(100) NOT NULL UNIQUE KEY,
	Username				VARCHAR(100) NOT NULL UNIQUE KEY,
	FullName				VARCHAR(20) NOT NULL UNIQUE KEY,
 	DepartmentID 			TINYINT UNSIGNED NOT NULL,
 	PositionID 				TINYINT UNSIGNED NOT NULL,
 	CreateDate 				DATETIME DEFAULT NOW(),
    FOREIGN KEY (DepartmentID) REFERENCES Department(DepartmentID),
	FOREIGN KEY (PositionID) REFERENCES `Position`(PositionID)
);

DROP TABLE IF EXISTS `Group`;
CREATE TABLE IF NOT EXISTS `Group` (
	GroupID					TINYINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	GroupName				NVARCHAR(40) NOT NULL,
	CreatorID				TINYINT UNSIGNED,
	CreateDate				DATETIME DEFAULT NOW(),
    FOREIGN KEY(CreatorID) REFERENCES `Account`(AccountID)
);

DROP TABLE IF EXISTS GroupAccount;
CREATE TABLE IF NOT EXISTS GroupAccount (
	GroupID					TINYINT UNSIGNED,
    AccountID 				TINYINT UNSIGNED NOT NULL,
    JoinDate				DATETIME DEFAULT NOW(),
    PRIMARY KEY(GroupID, AccountID),
	FOREIGN KEY(GroupID)  REFERENCES `Group`(GroupID),
    FOREIGN KEY(AccountID)  REFERENCES `Account`(AccountID)
);

DROP TABLE IF EXISTS TypeQuestion;
CREATE TABLE IF NOT EXISTS TypeQuestion (
	TypeID					TINYINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    TypeName				ENUM('Essay','Multiple-Choice')
);

DROP TABLE IF EXISTS CategoryQuestion;
CREATE TABLE IF NOT EXISTS CategoryQuestion (
	CategoryID				TINYINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    CategoryName 			NVARCHAR(50) NOT NULL 
);

DROP TABLE IF EXISTS Question;    
CREATE TABLE IF NOT EXISTS Question (
	QuestionID				TINYINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    Content					TEXT NOT NULL,
    CategoryID				TINYINT UNSIGNED NOT NULL,
    TypeID					TINYINT UNSIGNED NOT NULL,
    CreatorID				TINYINT UNSIGNED,
    CreateDate				DATETIME DEFAULT NOW(),
    FOREIGN KEY(CategoryID) REFERENCES CategoryQuestion(CategoryID),
    FOREIGN KEY(TypeID)		REFERENCES TypeQuestion(TypeID),
    FOREIGN KEY(CreatorID)	REFERENCES `Account`(AccountID)
);

DROP TABLE IF EXISTS Answer;
CREATE TABLE IF NOT EXISTS Answer (
	AnswerID				TINYINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	Content					TEXT NOT NULL,
	QuestionID				TINYINT UNSIGNED NOT NULL,
	isCorrect				BOOLEAN,
    FOREIGN KEY(QuestionID) REFERENCES Question(QuestionID)
);

DROP TABLE IF EXISTS Exam;
CREATE TABLE IF NOT EXISTS Exam (
	ExamID					TINYINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	`Code`					CHAR(10) NOT NULL,
	Title					NVARCHAR(40) NOT NULL,
	CategoryID				TINYINT UNSIGNED NOT NULL,
	Duration				TINYINT UNSIGNED NOT NULL,
	CreatorID				TINYINT UNSIGNED NOT NULL,
	CreateDate				DATETIME DEFAULT NOW(),
    FOREIGN KEY(CategoryID) REFERENCES CategoryQuestion(CategoryID),
    FOREIGN KEY(CreatorID) REFERENCES `Account`(AccountID)
);

DROP TABLE IF EXISTS ExamQuestion;
CREATE TABLE IF NOT EXISTS ExamQuestion (
	ExamID					TINYINT UNSIGNED NOT NULL,
	QuestionID				TINYINT UNSIGNED NOT NULL,
    PRIMARY KEY(ExamID,QuestionID),
    FOREIGN KEY(ExamID) REFERENCES Exam(ExamID),
    FOREIGN KEY(QuestionID) REFERENCES Question(QuestionID)
);
